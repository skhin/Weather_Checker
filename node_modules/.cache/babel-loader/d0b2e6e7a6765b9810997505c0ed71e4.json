{"ast":null,"code":"var _jsxFileName = \"/Users/sireenakhin/Desktop/Weather_Checker/src/context/WeatherState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport WeatherContext from \"./weather-context\";\nimport weatherReducer from \"./weather-reducer\";\nimport * as weatherTypes from \"./weather-type\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherState = props => {\n  _s();\n\n  const intialState = {\n    weather: [],\n    forecast: []\n  };\n  const [state, dispatch] = useReducer(weatherReducer, intialState);\n\n  const actionDefaultWeather = weather => {\n    dispatch({\n      type: weatherTypes.DEFAULT_WEATHER,\n      payload: weather\n    });\n  };\n\n  const actionForecast = (id, data) => {\n    dispatch({\n      type: weatherTypes.FORECAST,\n      payload: {\n        id,\n        data\n      }\n    });\n  };\n\n  const actionSearchCity = city => {\n    dispatch({\n      type: weatherTypes.SEARCH_CITY,\n      payload: city\n    });\n  };\n\n  const actionRemoveWeather = id => {\n    dispatch({\n      type: weatherTypes.REMOVE_WEATHER,\n      payload: id\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: {\n      weather: state.weather,\n      forecast: state.forecast,\n      actionDefaultWeather,\n      actionForecast,\n      actionSearchCity,\n      actionRemoveWeather\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherState, \"OmMLnGUD43KmAt2tR/kSNvJPeko=\");\n\n_c = WeatherState;\nexport default WeatherState;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherState\");","map":{"version":3,"sources":["/Users/sireenakhin/Desktop/Weather_Checker/src/context/WeatherState.js"],"names":["React","useReducer","WeatherContext","weatherReducer","weatherTypes","WeatherState","props","intialState","weather","forecast","state","dispatch","actionDefaultWeather","type","DEFAULT_WEATHER","payload","actionForecast","id","data","FORECAST","actionSearchCity","city","SEARCH_CITY","actionRemoveWeather","REMOVE_WEATHER","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA,OAAO,KAAKC,YAAZ,MAA8B,gBAA9B;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAMC,WAAW,GAAG;AAClBC,IAAAA,OAAO,EAAE,EADS;AAElBC,IAAAA,QAAQ,EAAE;AAFQ,GAApB;AAKA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,UAAU,CAACE,cAAD,EAAiBI,WAAjB,CAApC;;AAEA,QAAMK,oBAAoB,GAAIJ,OAAD,IAAa;AACxCG,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET,YAAY,CAACU,eADZ;AAEPC,MAAAA,OAAO,EAAEP;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,QAAMQ,cAAc,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAc;AACnCP,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET,YAAY,CAACe,QADZ;AAEPJ,MAAAA,OAAO,EAAE;AAAEE,QAAAA,EAAF;AAAMC,QAAAA;AAAN;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,QAAME,gBAAgB,GAAIC,IAAD,IAAU;AACjCV,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET,YAAY,CAACkB,WADZ;AAEPP,MAAAA,OAAO,EAAEM;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,QAAME,mBAAmB,GAAIN,EAAD,IAAQ;AAClCN,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET,YAAY,CAACoB,cADZ;AAEPT,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLT,MAAAA,OAAO,EAAEE,KAAK,CAACF,OADV;AAELC,MAAAA,QAAQ,EAAEC,KAAK,CAACD,QAFX;AAGLG,MAAAA,oBAHK;AAILI,MAAAA,cAJK;AAKLI,MAAAA,gBALK;AAMLG,MAAAA;AANK,KADT;AAAA,cAUGjB,KAAK,CAACmB;AAVT;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAlDD;;GAAMpB,Y;;KAAAA,Y;AAoDN,eAAeA,YAAf","sourcesContent":["import React, { useReducer } from \"react\";\nimport WeatherContext from \"./weather-context\";\nimport weatherReducer from \"./weather-reducer\";\n\nimport * as weatherTypes from \"./weather-type\";\n\nconst WeatherState = (props) => {\n  const intialState = {\n    weather: [],\n    forecast: [],\n  };\n\n  const [state, dispatch] = useReducer(weatherReducer, intialState);\n\n  const actionDefaultWeather = (weather) => {\n    dispatch({\n      type: weatherTypes.DEFAULT_WEATHER,\n      payload: weather,\n    });\n  };\n\n  const actionForecast = (id, data) => {\n    dispatch({\n      type: weatherTypes.FORECAST,\n      payload: { id, data },\n    });\n  };\n\n  const actionSearchCity = (city) => {\n    dispatch({\n      type: weatherTypes.SEARCH_CITY,\n      payload: city,\n    });\n  };\n\n  const actionRemoveWeather = (id) => {\n    dispatch({\n      type: weatherTypes.REMOVE_WEATHER,\n      payload: id,\n    });\n  };\n\n  return (\n    <WeatherContext.Provider\n      value={{\n        weather: state.weather,\n        forecast: state.forecast,\n        actionDefaultWeather,\n        actionForecast,\n        actionSearchCity,\n        actionRemoveWeather,\n      }}\n    >\n      {props.children}\n    </WeatherContext.Provider>\n  );\n};\n\nexport default WeatherState;\n"]},"metadata":{},"sourceType":"module"}