{"ast":null,"code":"var _jsxFileName = \"/Users/sireenakhin/Desktop/Weather_Checker/src/components/SearchForm.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport React, { useState, useContext } from \"react\";\nimport WeatherContext from \"../context/weather-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchForm = () => {\n  _s();\n\n  const [search, setSearch] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    actionSearchCity\n  } = useContext(WeatherContext);\n  const ApiKey = process.env.REACT_APP_API_KEY;\n\n  const handleSearch = async e => {\n    e.preventDefault();\n\n    if (!search) {\n      alert(\"Please enter city name to search !\");\n      return false;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${search}&units=metric&appid=${ApiKey}`);\n      const res = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${response.data.city.coord.lat}&lon=${response.data.city.coord.lon}&exclude=minutely,hourly&units=metric&appid=${ApiKey}`);\n      const {\n        dt,\n        weather,\n        temp,\n        sunrise,\n        sunset\n      } = res.data.current;\n      const currentData = {\n        id: new Date().getTime(),\n        cityName: search,\n        date: moment(dt * 1000).format(\"ddd, D MMM\"),\n        time: dt,\n        cond: weather[0].main,\n        icon: weather[0].icon,\n        temp,\n        sunrise: sunrise,\n        sunset: sunset,\n        forecast: res.data.daily.slice(1, 6)\n      };\n      actionSearchCity(currentData);\n    } catch (error) {\n      alert(\"City not found !\");\n    } finally {\n      setSearch(\"\");\n      setIsLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSearch,\n    className: \"search_form\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setSearch(e.target.value),\n      value: search,\n      type: \"text\",\n      placeholder: \"Search City...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      disabled: isLoading,\n      value: isLoading ? \"Loading...\" : \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchForm, \"F96XT33q2x75DzTSv+Azjh6bT4U=\");\n\n_c = SearchForm;\nexport default SearchForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchForm\");","map":{"version":3,"sources":["/Users/sireenakhin/Desktop/Weather_Checker/src/components/SearchForm.js"],"names":["axios","moment","React","useState","useContext","WeatherContext","SearchForm","search","setSearch","isLoading","setIsLoading","actionSearchCity","ApiKey","process","env","REACT_APP_API_KEY","handleSearch","e","preventDefault","alert","response","get","res","data","city","coord","lat","lon","dt","weather","temp","sunrise","sunset","current","currentData","id","Date","getTime","cityName","date","format","time","cond","main","icon","forecast","daily","slice","error","target","value"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport moment from \"moment\";\nimport React, { useState, useContext } from \"react\";\nimport WeatherContext from \"../context/weather-context\";\n\nconst SearchForm = () => {\n  const [search, setSearch] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { actionSearchCity } = useContext(WeatherContext);\n\n  const ApiKey = process.env.REACT_APP_API_KEY;\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    if (!search) {\n      alert(\"Please enter city name to search !\");\n      return false;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await axios.get(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${search}&units=metric&appid=${ApiKey}`\n      );\n      const res = await axios.get(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${response.data.city.coord.lat}&lon=${response.data.city.coord.lon}&exclude=minutely,hourly&units=metric&appid=${ApiKey}`\n      );\n\n      const { dt, weather, temp, sunrise, sunset } = res.data.current;\n\n      const currentData = {\n        id: new Date().getTime(),\n        cityName: search,\n        date: moment(dt * 1000).format(\"ddd, D MMM\"),\n        time: dt,\n        cond: weather[0].main,\n        icon: weather[0].icon,\n        temp,\n        sunrise: sunrise,\n        sunset: sunset,\n        forecast: res.data.daily.slice(1, 6),\n      };\n\n      actionSearchCity(currentData);\n    } catch (error) {\n      alert(\"City not found !\");\n    } finally {\n      setSearch(\"\");\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSearch} className=\"search_form\">\n      <input\n        onChange={(e) => setSearch(e.target.value)}\n        value={search}\n        type=\"text\"\n        placeholder=\"Search City...\"\n      />\n      <input\n        type=\"submit\"\n        disabled={isLoading}\n        value={isLoading ? \"Loading...\" : \"Search\"}\n      />\n    </form>\n  );\n};\n\nexport default SearchForm;\n"]},"metadata":{},"sourceType":"module"}