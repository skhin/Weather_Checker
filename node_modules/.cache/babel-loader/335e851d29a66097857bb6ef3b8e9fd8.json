{"ast":null,"code":"var _jsxFileName = \"/Users/sireenakhin/Desktop/Weather_Checker/src/components/WeatherInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport WeatherInfoCard from \"./WeatherInfoCard\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport WeatherContext from \"../context/weather-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCity = [\"Singapore\", \"Brisbane\", \"Prague\"];\n\nconst WeatherInfo = () => {\n  _s();\n\n  const [storeData, setStoreData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    weather,\n    actionDefaultWeather\n  } = useContext(WeatherContext);\n  const ApiKey = process.env.REACT_APP_API_KEY;\n\n  const fetchApi = async dcity => {\n    setIsLoading(true);\n\n    try {\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${dcity}&units=metric&appid=${ApiKey}`);\n      const res = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${response.data.city.coord.lat}&lon=${response.data.city.coord.lon}&exclude=minutely,hourly&units=metric&appid=${ApiKey}`);\n      const {\n        dt,\n        weather,\n        temp,\n        sunrise,\n        sunset\n      } = res.data.current;\n      console.log(res);\n      const currentData = {\n        id: new Date().getTime(),\n        cityName: dcity,\n        // date: moment(dt * 1000).format(\"ddd, D MMM\"),\n        date: dt * 1000,\n        time: dt,\n        cond: weather[0].main,\n        icon: weather[0].icon,\n        temp: temp,\n        sunrise: sunrise,\n        sunset: sunset,\n        forecast: res.data.daily.slice(1, 6)\n      };\n      setStoreData(preValue => [...preValue, currentData]);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    defaultCity.map(dcity => fetchApi(dcity));\n  }, []);\n  useEffect(() => {\n    actionDefaultWeather(storeData);\n  }, [storeData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather_info\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : weather.map((weather, ind) => /*#__PURE__*/_jsxDEV(WeatherInfoCard, {\n      weather: weather\n    }, ind, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherInfo, \"wr56+OdfTq1ihJGMXPLxKR5ND+A=\");\n\n_c = WeatherInfo;\nexport default WeatherInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherInfo\");","map":{"version":3,"sources":["/Users/sireenakhin/Desktop/Weather_Checker/src/components/WeatherInfo.js"],"names":["React","useEffect","useState","useContext","WeatherInfoCard","axios","moment","WeatherContext","defaultCity","WeatherInfo","storeData","setStoreData","isLoading","setIsLoading","weather","actionDefaultWeather","ApiKey","process","env","REACT_APP_API_KEY","fetchApi","dcity","response","get","res","data","city","coord","lat","lon","dt","temp","sunrise","sunset","current","console","log","currentData","id","Date","getTime","cityName","date","time","cond","main","icon","forecast","daily","slice","preValue","error","map","ind"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport WeatherInfoCard from \"./WeatherInfoCard\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nimport WeatherContext from \"../context/weather-context\";\n\nconst defaultCity = [\"Singapore\", \"Brisbane\", \"Prague\"];\n\nconst WeatherInfo = () => {\n  const [storeData, setStoreData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { weather, actionDefaultWeather } = useContext(WeatherContext);\n\n  const ApiKey = process.env.REACT_APP_API_KEY;\n\n  const fetchApi = async (dcity) => {\n    setIsLoading(true);\n    try {\n      const response = await axios.get(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${dcity}&units=metric&appid=${ApiKey}`\n      );\n      const res = await axios.get(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${response.data.city.coord.lat}&lon=${response.data.city.coord.lon}&exclude=minutely,hourly&units=metric&appid=${ApiKey}`\n      );\n\n      const { dt, weather, temp, sunrise, sunset } = res.data.current;\n      console.log(res);\n\n      const currentData = {\n        id: new Date().getTime(),\n        cityName: dcity,\n        // date: moment(dt * 1000).format(\"ddd, D MMM\"),\n        date: dt * 1000,\n        time: dt,\n        cond: weather[0].main,\n        icon: weather[0].icon,\n        temp: temp,\n        sunrise: sunrise,\n        sunset: sunset,\n        forecast: res.data.daily.slice(1, 6),\n      };\n      setStoreData((preValue) => [...preValue, currentData]);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    defaultCity.map((dcity) => fetchApi(dcity));\n  }, []);\n\n  useEffect(() => {\n    actionDefaultWeather(storeData);\n  }, [storeData]);\n\n  return (\n    <div className=\"weather_info\">\n      {isLoading ? (\n        <h3>Loading...</h3>\n      ) : (\n        weather.map((weather, ind) => (\n          <WeatherInfoCard key={ind} weather={weather} />\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default WeatherInfo;\n"]},"metadata":{},"sourceType":"module"}