{"ast":null,"code":"var _jsxFileName = \"/Users/sireenakhin/Desktop/Weather_Checker/src/components/WeatherInfoCard.js\",\n    _s = $RefreshSig$();\n\nimport moment from \"moment\";\nimport React, { useContext } from \"react\";\nimport WeatherContext from \"../context/weather-context\";\nimport WeatherTemperature from \"./WeatherTemperature\";\nimport FormattedDate from \"./FormattedDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherInfoCard = _ref => {\n  _s();\n\n  let {\n    weather\n  } = _ref;\n  const {\n    forecast,\n    actionForecast,\n    actionRemoveWeather\n  } = useContext(WeatherContext);\n  const targetBody = document.querySelector(\"body\");\n\n  const handleForecast = weather => {\n    actionForecast(weather.id, weather.forecast);\n\n    if (weather.time * 1000 >= weather.sunrise * 1000 && weather.time * 1000 <= weather.sunset * 1000) {\n      targetBody.style.color = \"#164785\";\n      targetBody.style.background = \"linear-gradient(178deg, rgba(201, 234, 252, 0.51) 14.9%, rgba(139, 192, 216, 0.73) 80%)\";\n    } else {\n      targetBody.style.color = \"whitesmoke\";\n      targetBody.style.background = \"linear-gradient(112.1deg, rgb(32, 38, 57) 11.4%, rgb(63, 76, 119) 70.2%)\";\n    }\n  };\n\n  console.log(weather);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    classname: \"weatherinfo-card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${forecast.id === weather.id ? \"weather_card active\" : \"weather_card\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: weather.cityName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: moment(weather.time * 1000).format(\"h:mm a\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather.cond\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon_temp\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/w/${weather.icon}.png`,\n          alt: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: /*#__PURE__*/_jsxDEV(WeatherTemperature, {\n            celsius: weather.temp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83C\\uDF05 Sunrise: \", moment(weather.sunrise * 1000).format(\"h:mm a\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83C\\uDF07 Sunset: \", moment(weather.sunset * 1000).format(\"h:mm a\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleForecast(weather),\n        children: \"Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => actionRemoveWeather(weather.id),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherInfoCard, \"womBf3GM8PppNT1tJLOZlH5mNkQ=\");\n\n_c = WeatherInfoCard;\nexport default WeatherInfoCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherInfoCard\");","map":{"version":3,"sources":["/Users/sireenakhin/Desktop/Weather_Checker/src/components/WeatherInfoCard.js"],"names":["moment","React","useContext","WeatherContext","WeatherTemperature","FormattedDate","WeatherInfoCard","weather","forecast","actionForecast","actionRemoveWeather","targetBody","document","querySelector","handleForecast","id","time","sunrise","sunset","style","color","background","console","log","cityName","date","format","cond","icon","temp"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport React, { useContext } from \"react\";\nimport WeatherContext from \"../context/weather-context\";\nimport WeatherTemperature from \"./WeatherTemperature\";\nimport FormattedDate from \"./FormattedDate\";\n\nconst WeatherInfoCard = ({ weather }) => {\n  const { forecast, actionForecast, actionRemoveWeather } =\n    useContext(WeatherContext);\n\n  const targetBody = document.querySelector(\"body\");\n\n  const handleForecast = (weather) => {\n    actionForecast(weather.id, weather.forecast);\n    if (\n      weather.time * 1000 >= weather.sunrise * 1000 &&\n      weather.time * 1000 <= weather.sunset * 1000\n    ) {\n      targetBody.style.color = \"#164785\";\n      targetBody.style.background =\n        \"linear-gradient(178deg, rgba(201, 234, 252, 0.51) 14.9%, rgba(139, 192, 216, 0.73) 80%)\";\n    } else {\n      targetBody.style.color = \"whitesmoke\";\n      targetBody.style.background =\n        \"linear-gradient(112.1deg, rgb(32, 38, 57) 11.4%, rgb(63, 76, 119) 70.2%)\";\n    }\n  };\n  console.log(weather);\n\n  return (\n    <div classname=\"weatherinfo-card\">\n      <div\n        className={`${\n          forecast.id === weather.id ? \"weather_card active\" : \"weather_card\"\n        }`}\n      >\n        <h1>{weather.cityName}</h1>\n        <p>{/* <FormattedDate date={weather} /> */}</p>\n        <p>{weather.date}</p>\n        <p>{moment(weather.time * 1000).format(\"h:mm a\")}</p>\n        <p>{weather.cond}</p>\n\n        <div className=\"icon_temp\">\n          <img\n            src={`http://openweathermap.org/img/w/${weather.icon}.png`}\n            alt=\"icon\"\n          />\n          <span>\n            <WeatherTemperature celsius={weather.temp} />\n          </span>\n        </div>\n        <br />\n        <p>ðŸŒ… Sunrise: {moment(weather.sunrise * 1000).format(\"h:mm a\")}</p>\n        <p>ðŸŒ‡ Sunset: {moment(weather.sunset * 1000).format(\"h:mm a\")}</p>\n\n        <button onClick={() => handleForecast(weather)}>Forecast</button>\n        <button onClick={() => actionRemoveWeather(weather.id)}>Remove</button>\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherInfoCard;\n"]},"metadata":{},"sourceType":"module"}