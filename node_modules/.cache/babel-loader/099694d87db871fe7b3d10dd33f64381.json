{"ast":null,"code":"var _jsxFileName = \"/Users/sireenakhin/Desktop/Weather_Checker/src/components/WeatherInfoCard.js\",\n    _s = $RefreshSig$();\n\nimport moment from \"moment\";\nimport React, { useContext } from \"react\";\nimport weatherContext from \"./context/weather-context\";\nimport WeatherTemperature from \"./WeatherTemperature\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherInfoCard = _ref => {\n  _s();\n\n  let {\n    weather\n  } = _ref;\n  const {\n    forecast,\n    actionForecast,\n    actionRemoveWeather\n  } = useContext(weatherContext);\n  const targetBody = document.querySelector(\"body\");\n\n  const handleForecast = weather => {\n    actionForecast(weather.id, weather.forecast);\n\n    if (weather.time * 1000 >= weather.sunrise * 1000 && weather.time * 1000 <= weather.sunset * 1000) {\n      targetBody.style.color = \"#164785\";\n      targetBody.style.background = \"radial-gradient(907px at 3.4% 19.8%, rgb(255, 243, 122) 0%, rgb(255, 102, 145) 97.4%)\";\n    } else {\n      targetBody.style.color = \"whitesmoke\";\n      targetBody.style.background = \"linear-gradient(112.1deg, rgb(32, 38, 57) 11.4%, rgb(63, 76, 119) 70.2%)\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${forecast.id === weather.id ? \"weather_card active\" : \"weather_card\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: weather.cityName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: weather.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: moment(weather.time * 1000).format(\"h:mm a\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: weather.cond\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon_temp\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://openweathermap.org/img/w/${weather.icon}.png`,\n        alt: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(WeatherTemperature, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uD83C\\uDF05 Sunrise: \", moment(weather.sunrise * 1000).format(\"h:mm a\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uD83C\\uDF07 Sunset: \", moment(weather.sunset * 1000).format(\"h:mm a\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleForecast(weather),\n      children: \"Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => actionRemoveWeather(weather.id),\n      children: \"Remove\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherInfoCard, \"womBf3GM8PppNT1tJLOZlH5mNkQ=\");\n\n_c = WeatherInfoCard;\nexport default WeatherInfoCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherInfoCard\");","map":{"version":3,"sources":["/Users/sireenakhin/Desktop/Weather_Checker/src/components/WeatherInfoCard.js"],"names":["moment","React","useContext","weatherContext","WeatherTemperature","WeatherInfoCard","weather","forecast","actionForecast","actionRemoveWeather","targetBody","document","querySelector","handleForecast","id","time","sunrise","sunset","style","color","background","cityName","date","format","cond","icon"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport React, { useContext } from \"react\";\nimport weatherContext from \"./context/weather-context\";\nimport WeatherTemperature from \"./WeatherTemperature\";\n\nconst WeatherInfoCard = ({ weather }) => {\n  const { forecast, actionForecast, actionRemoveWeather } =\n    useContext(weatherContext);\n\n  const targetBody = document.querySelector(\"body\");\n\n  const handleForecast = (weather) => {\n    actionForecast(weather.id, weather.forecast);\n    if (\n      weather.time * 1000 >= weather.sunrise * 1000 &&\n      weather.time * 1000 <= weather.sunset * 1000\n    ) {\n      targetBody.style.color = \"#164785\";\n      targetBody.style.background =\n        \"radial-gradient(907px at 3.4% 19.8%, rgb(255, 243, 122) 0%, rgb(255, 102, 145) 97.4%)\";\n    } else {\n      targetBody.style.color = \"whitesmoke\";\n      targetBody.style.background =\n        \"linear-gradient(112.1deg, rgb(32, 38, 57) 11.4%, rgb(63, 76, 119) 70.2%)\";\n    }\n  };\n\n  return (\n    <div\n      className={`${\n        forecast.id === weather.id ? \"weather_card active\" : \"weather_card\"\n      }`}\n    >\n      <h1>{weather.cityName}</h1>\n      <p>{weather.date}</p>\n      <p>{moment(weather.time * 1000).format(\"h:mm a\")}</p>\n      <p>{weather.cond}</p>\n\n      <div className=\"icon_temp\">\n        <img\n          src={`http://openweathermap.org/img/w/${weather.icon}.png`}\n          alt=\"icon\"\n        />\n        <span>\n          <WeatherTemperature />\n          {/* {Math.round(weather.temp)} Â°C |{\" \"}\n          {Math.round(weather.temp * (9 / 5) + 32)} Â°F */}\n        </span>\n      </div>\n\n      <p>ðŸŒ… Sunrise: {moment(weather.sunrise * 1000).format(\"h:mm a\")}</p>\n      <p>ðŸŒ‡ Sunset: {moment(weather.sunset * 1000).format(\"h:mm a\")}</p>\n\n      <button onClick={() => handleForecast(weather)}>Forecast</button>\n      <button onClick={() => actionRemoveWeather(weather.id)}>Remove</button>\n    </div>\n  );\n};\n\nexport default WeatherInfoCard;\n"]},"metadata":{},"sourceType":"module"}